
package calogiciel;

import Modele.Adherent;
import Modele.DAO.AdherentDAO;
import Modele.DAO.EmpruntDAO;
import Modele.DAO.MediaDAO;
import Modele.Emprunt;
import Modele.Media;
import com.toedter.calendar.JDateChooser;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author poisson.cdi01
 */

public class PanelPret extends PanelStructure implements ActionListener, KeyListener {
     
    private String[] entetes;
    protected List<Emprunt> donnees;
    private FenetrePrincipale fenetre;
    int height;
    int width, margeCote = 0;    
    JComboBox champEmprunteur;
    JTextField champMedia;
    JDateChooser champDate;    
    JLabel labelMedia,labelEmprunteur,labelDate;
    JList<Media> liste ;
    JScrollPane listeDeroulante;
    DefaultListModel<Media> listeMediaCorres;
    String mediaRecherche ;
    
    public PanelPret(FenetrePrincipale fenetre)
    {   
        super(fenetre, new TableModelPret("",""));
        this.fenetre = fenetre;        
        labelTitre.setText("Liste de prêts");
        combo1.addItem("Tous les états");
        List<Object> listeCombo1 =  findAllEtat();
        for(Object obj : listeCombo1)
        {
            combo1.addItem(obj);
        }   
        combo1.addItemListener(this);
        
         barreRecherche.setText("Rechercher par titre et emprunteur");
       // tableauDeroulant = new JScrollPane(tableau);
         
        MAJcombo4(new EmpruntDAO().compterLignesRecherche("",""),1);
        
        boutonAjout.setText("Ajouter prêt"); 
        this.responsivePanel();
        this.add(combo1);
        this.add(tableauDeroulant);
        this.add(pagePlus);
        this.add(pageMoins);
        this.add(labelPage);
        this.setVisible(true);
    }
    
    public void afficherFormulaire(){
        
        this.removeAll();
        JPanel panelAjout = new JPanel();
        panelAjout.setLayout(new GridLayout(12, 2));
        labelTitre.setText("Ajouter un prêts");
        labelMedia = new JLabel("Titre du média : ");
        champMedia = new JTextField();
        champMedia.addKeyListener(this);
        champMedia.setEditable(true);
        
        // autocompletion sur le titre 
        mediaRecherche = new String();
        liste = new JList();
        listeMediaCorres = new DefaultListModel<>();
        liste = new JList<>(listeMediaCorres);        
        liste.addMouseListener(this);
        listeDeroulante = new JScrollPane(liste);
        listeDeroulante.setVisible(false);
        
        labelEmprunteur = new JLabel("Nom de l'emprunteur : ");
        champEmprunteur = new JComboBox();
        champEmprunteur.addItem("Choisir l'emprunteur");
        List<Adherent> listeAdherent =  (new AdherentDAO()).findAll();
        for(Adherent adh : listeAdherent)
        {
            champEmprunteur.addItem(adh);
        } 
                
        boutonAjoutBDD = new JButton("ajouter");
        boutonAjoutBDD.addActionListener(this);
        
        labelTitre.setBounds(10,10,200,30);
        
        panelAjout.setBounds(50,50,600,400);    
        boutonAjoutBDD.setBounds(50,470,100,40);     
        listeDeroulante.setBounds(50,120,600,80);       
        
        this.add(listeDeroulante);
        this.add(labelTitre);
        panelAjout.add(labelMedia);
        panelAjout.add(champMedia);
        panelAjout.add(labelEmprunteur);
        panelAjout.add(champEmprunteur);
        
        this.add(labelPage);
        this.add(boutonAjoutBDD);
        this.add(panelAjout);
        this.repaint();
        this.revalidate();
    }
   
    
    public List<Object> findAllEtat(){
        List<Object> liste = new ArrayList();
        liste.add("Attente de confirmation");
        liste.add("En cours");
        liste.add("En retard");
        liste.add("Terminé");
        return liste;
    }    
   
    @Override
    public void actionPerformed(ActionEvent ae) {
       if(ae.getSource().equals(boutonAjout))
       {
          afficherFormulaire();
       }
       if(ae.getSource().equals(boutonAjoutBDD))
       {
            verifierDonnees(1); 
        }
        if (ae.getSource().equals(pagePlus))
       {
           int pageActuelle = (int)combo4.getSelectedItem();
           if(pageActuelle<combo4.getItemCount())
           combo4.setSelectedItem(pageActuelle+1);
       }
       
       if (ae.getSource().equals(pageMoins))
       {
           int pageActuelle = (int)combo4.getSelectedItem();
           if(pageActuelle!=1)
            combo4.setSelectedItem(pageActuelle-1);
       }
    }
    
    
    public void verifierDonnees(int action){
        boolean validite = false;
        labelEmprunteur.setForeground(Color.black);
        labelMedia.setForeground(Color.black);
        Media media = new Media();
        Adherent adherent = new Adherent();        
        SimpleDateFormat format =new SimpleDateFormat("yyyy-MM-dd");
        String date;
        date = format.format(new java.util.Date( ));
        if(champEmprunteur.getSelectedItem().equals(champEmprunteur.getItemAt(0))) {labelEmprunteur.setForeground(Color.red); validite = false;}
        else adherent = (Adherent) champEmprunteur.getSelectedItem();

        
        if(validite)
        {
            Emprunt emprunt = new Emprunt (0,date,adherent.getPersonne(), media, date, "confirmé");
            if(action==1)
            {
                System.out.println("ajout");
                EmpruntDAO e = new EmpruntDAO();
                boolean ajout = e.create(emprunt);
                if (ajout)
                    System.out.println("ajout effectué");
               // ajouter();
            }
            else if(action==2)
            {
                System.out.println("modif");
                //modifier();
            }
        }
    }
  
    
    // confirmation et suppression d'un média
    public void supprimerEmprunt(int id)
    {
        // demande de confirmation
        JOptionPane d = new JOptionPane();
        int retour = d.showConfirmDialog(fenetre, "Etes vous sur de vouloir supprimer cet emprunt?", "Suppression", JOptionPane.OK_CANCEL_OPTION); 
       
        // ok : 0 -- annuler : 2 -- close : -1
        // suppression + actualisation de la page
        if(retour==0)
        {
            
            EmpruntDAO emprunt = new EmpruntDAO();
            emprunt.delete(id);
            fenetre.panelPret = new PanelPret(fenetre);
            fenetre.add(fenetre.panelPret);
            fenetre.repaint();
        }
    }


    @Override
    public void keyTyped(KeyEvent ke) 
    {
        mediaRecherche += ke.getKeyChar();
        System.out.println("element : "+mediaRecherche);
        liste.removeAll();
        listeMediaCorres.removeAllElements();
        List<Media> listeMedia = (new MediaDAO()).findAllAuto(mediaRecherche); 
        
        for(Media m : listeMedia)
        {
            listeMediaCorres.addElement(m);
        }        
        liste.revalidate();
        listeDeroulante.setVisible(true);  
    }
    @Override
    public void keyPressed(KeyEvent ke) {}

    @Override
    public void keyReleased(KeyEvent ke) {}
   
   
    public void mouseClicked(MouseEvent arg0) {
       
        // selectionner un auteur dans la liste autocompletion (ajout)
        if(arg0.getSource().equals(liste))
        {
            // si double-clique
            if (arg0.getClickCount() == 2)
            {
                System.out.println(" selectionné : "+ liste.getSelectedValue());
                // on vide la liste et on la cache
                liste.removeAll();
                listeDeroulante.setVisible(false);
                // on insere l'élément sélectionné dans le champ de titre
                champMedia.setText(liste.getSelectedValue().getTitre());
            }
        }
    }
    
    public void MAJTableau(boolean comboPage){
            String recherche="";
            String etat="";
            int dispo=2;
            int page=1 ;
            
           this.remove(tableauDeroulant);
           if (!barreRecherche.getText().equals("Rechercher par titre et emprunteur"))
                recherche = barreRecherche.getText();
                    
            
           if (!combo1.getSelectedItem().equals("Tous les états"))
               etat=(String)combo1.getSelectedItem();
           
            if (comboPage){
               page = (int)combo4.getSelectedItem();
           }                  
             
           tableauDeroulant=initialiserTableau(new TableModelPret(recherche, etat));
           int nblignes = new EmpruntDAO().compterLignesRecherche(recherche, etat);
           MAJcombo4(nblignes,page);
           responsivePanel();
           this.add(tableauDeroulant);
           this.repaint();
           
           this.updateUI();
    }
    
}
